<!doctype html>
<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="/main.css" rel="stylesheet">
</head>
<body>
<div x-data="state()">
  <form @submit.prevent="submit()">
    <input type="file" x-ref="fileInput" @change="file=$refs.fileInput.files[0]">
    <!--<input type="text" placeholder="caption" @model="caption">-->
    <button>Upload</button>
  </form>
  <div class="flex">
    {% for image in images %}
      <div class="admin-thumb">
        <button @click.prevent="deleteImage('{{ image.id }}')">Delete</button>
        <img class="w-full" src="/images/{{ image.id }}_thumb.jpg">
      </div>
    {% endfor %}
  </div>
</div>

<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.7.3/dist/alpine.min.js"></script>
<script>
  function state() {
    return {
      file: null,
      //caption: '',
      async deleteImage(id) {
        await fetch(`/api/delete-image/${id}`, {
          method: 'post'
        })
        window.location.reload()
      },
      async submit() {
        const img = await new Promise(res => {
          const reader = new window.FileReader
          const img = new Image
          reader.onload = e => {
            img.src = e.target.result
            res(img)
          }
          reader.readAsDataURL(this.file)
        })
        const thumb = await crop(img, 1)
        const fd = new FormData()
        fd.append('image', this.file)
        fd.append('thumb', thumb)
        //fd.append('caption', this.caption)
        await fetch('/api/add-image', {
          method: 'post',
          body: fd
        })
        window.location.reload()
      }
    }
  }

function crop(inputImage, aspectRatio) {

  return new Promise(resolve => {

    // let's store the width and height of our image
    const inputWidth = inputImage.naturalWidth;
    const inputHeight = inputImage.naturalHeight;

    // get the aspect ratio of the input image
    const inputImageAspectRatio = inputWidth / inputHeight;

    // if it's bigger than our target aspect ratio
    let outputWidth = inputWidth;
    let outputHeight = inputHeight;
    if (inputImageAspectRatio > aspectRatio) {
      outputWidth = inputHeight * aspectRatio;
    } else if (inputImageAspectRatio < aspectRatio) {
      outputHeight = inputWidth / aspectRatio;
    }

    outputWidth = outputWidth > 800 ? 800 : outputWidth
    outputHeight = outputHeight > 800 ? 800 : outputHeight

    // calculate the position to draw the image at
    const outputX = (outputWidth - inputWidth) * .5;
    const outputY = (outputHeight - inputHeight) * .5;

    // create a canvas that will present the output image
    const outputImage = document.createElement('canvas');

    // set it to the same size as the image
    outputImage.width = outputWidth;
    outputImage.height = outputHeight;

    // draw our image at position 0, 0 on the canvas
    const ctx = outputImage.getContext('2d');
    ctx.drawImage(inputImage, outputX, outputY);

    outputImage.toBlob(resolve, 'image/jpeg', 1);
  })
}

</script>
</body> 
</html>
