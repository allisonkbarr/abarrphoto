<!doctype html>
<html>
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="/main.css" rel="stylesheet">
</head>
<body>
<div x-data="state()" class="p-8">
  <form @submit.prevent="submit()" class="p-5 border border-black">
    <h2 class="text-lg font-bold">Add image</h2>
    <div class="field">
      <label>Image</label>
      <input type="file" x-ref="fileInput" @change="file=$refs.fileInput.files[0]">
    </div>
    <div class="field">
      <label>Caption</label>
      <textarea type="text" placeholder="caption" x-model="caption"></textarea>
    </div>
    <div class="field">
      <label>Category</label>
      <input type="text" x-model="customCategory">
      <div>Or select from one of the existing categories:</div>
      <select x-model="existingCategory">
        <option value="">--</option>
        {% for cat in categories %}
          <option value="{{ cat }}">{{ cat }}</option>
        {% endfor %}
      </select>
    </div>
    <button>Upload</button>
  </form>
  <div class="p-10 grid grid-cols-2 gap-4 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5">
    {% for image in images %}
      <div>
        <button @click.prevent="deleteImage('{{ image.id }}')">Delete</button>
        <a href="/admin/edit/{{ image.id }}">Edit</a>
        <img class="w-full" src="/images/{{ image.id }}_thumb.jpg">
      </div>
    {% endfor %}
  </div>
</div>
<script src="/smartcrop.js"></script>
<script src="/cropper.js"></script>
<script src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.7.3/dist/alpine.min.js"></script>
<script>
  function state() {
    return {
      file: null,
      caption: '',
      existingCategory: '',
      customCategory: '',
      async deleteImage(id) {
        await fetch(`/api/delete-image/${id}`, {
          method: 'post'
        })
        window.location.reload()
      },
      async submit() {
        resize(this.file, {
          outputFormat: 'canvas',
          targetWidth: 800,
          targetHeight: 800,
          crop: true
        }, (err, canvas) => {
          canvas.toBlob(blob => {
            const fd = new FormData()
            const cat = this.existingCategory || this.customCategory
            debugger
            fd.append('image', this.file)
            fd.append('thumb', blob)
            fd.append('category', cat.toLowerCase())
            fd.append('caption', this.caption)
            fetch('/api/add-image', {
              method: 'post',
              body: fd
            }).then(() => {
              window.location.reload()
            })
          }, 'image/jpeg', 1)
        })
      }
    }
  }

</script>
</body> 
</html>
